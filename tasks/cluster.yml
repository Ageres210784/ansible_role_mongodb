---
- name: cluster | check if hosts are in clustered
  shell: >-
    mongosh --port {{ mongo_net.port }} --quiet --eval 'db.isMaster().hosts'
  register: check_cluster
  changed_when: false

- name: cluster | set fact
  set_fact:
    check_cluster: "{{ check_cluster.stdout }}"

- name: cluster | build member list
  set_fact:
    members: >-
      {{
        members | default([]) +
        [{
          'host': item + ':{{ mongo_net.port }}',
          'priority': hostvars[item].mongo_replication_weight,
          'hidden': hostvars[item].mongo_replication_is_hidden 
        }]
      }}
  loop: "{{ ansible_play_hosts }}"
  run_once: true

- name: cluster | block to initial build the replica set
  block:

  - name: cluster | set fact for arbiter index number
    set_fact:
      arbiter_index: "{{ hostid }}"
    when: hostvars[item].mongo_replication_is_arbiter
    loop: "{{ ansible_play_hosts }}"
    loop_control:
      index_var: hostid

  - name: cluster | set temporary conf
    template:
      src: mongod.conf.j2
      dest: /etc/mongod.conf
      owner: root
      group: root
      mode: 0644
    vars:
      replication_init: true

  - name: cluster | restart mongo
    service:
      name: mongod
      state: restarted

  - name: cluster | initial build
    community.mongodb.mongodb_replicaset:
      login_host: localhost
      login_port: "{{ mongo_net.port }}"
      login_user: admin
      login_password: "{{ mongo_admin_pass }}"
      replica_set: "{{ mongo_replication.replSetName }}"
      members: "{{ members }}"
      arbiter_at_index: "{{ arbiter_index | default(omit) }}"
      validate: false
    when: check_cluster | length == 0

  - name: cluster | reconfigure replicaset
    community.mongodb.mongodb_replicaset:
      login_host: localhost
      login_port: "{{ mongo_net.port }}"
      login_user: admin
      login_password: "{{ mongo_admin_pass }}"
      replica_set: "{{ mongo_replication.replSetName }}"
      members: "{{ members }}"
      arbiter_at_index: "{{ arbiter_index | default(omit) }}"
      reconfigure: true
      validate: false
    when: check_cluster | length > 0

  - name: cluster | wait until cluster health is ok
    community.mongodb.mongodb_status:
      login_host: localhost
      login_user: admin
      login_password: "{{ mongo_admin_pass }}"
      login_port: "{{ mongo_net.port }}"
      validate: minimal
      poll: 5
      interval: 12
      replica_set: "{{ mongo_replication.replSetName }}"

  - name: cluster | place original config
    template:
      src: mongod.conf.j2
      dest: /etc/mongod.conf
      owner: root
      group: root
      mode: 0644

  - name: cluster | restart mongod service one by one
    shell: systemctl restart mongod && sleep 15
    run_once: true
    delegate_to: "{{ item }}"
    loop: "{{ ansible_play_hosts }}"

  - name: cluster | wait until cluster health is ok
    community.mongodb.mongodb_status:
      login_host: localhost
      login_port: "{{ mongo_net.port }}"
      login_user: admin
      login_password: "{{ mongo_admin_pass }}"
      validate: minimal
      poll: 5
      interval: 12
      replica_set: "{{ mongo_replication.replSetName }}"

  run_once: true
